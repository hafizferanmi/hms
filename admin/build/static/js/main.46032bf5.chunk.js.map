{"version":3,"sources":["components/misc/Button/Button.js","components/misc/Button/index.js","components/Form/TextInput.js","helpers/api.js","components/Form/index.js","components/LoginPage/LoginFormSchema.js","helpers/auth.js","components/LoginPage/Loginform.js","components/LoginPage/loginpage.js","components/LoginPage/index.js","components/misc/LoggedOutRoute/LoggedOutRoute.js","components/misc/LoggedOutRoute/index.js","components/misc/LoggedOutRoute/LoggedOutRouteContainer.js","hooks/useAsyncFn.js","Recoil/atoms.js","components/Dashboard/DashboardTable.js","components/misc/Centered/Center.js","components/misc/Centered/index.js","components/misc/Modal/index.js","components/misc/Modal/Modal.js","components/CompanyForm/CompanyFormSchema.js","components/CompanyForm/CompanyForm.js","components/CompanyForm/index.js","components/CompanyForm/CompanyFormContainer.js","components/misc/CreateCompanyButton/index.js","components/misc/CreateCompanyButton/CreateCompanyButton.js","components/Dashboard/DashboardEmpty.js","components/Dashboard/Dashboard.js","components/misc/Loading/loading.js","components/misc/Loading/index.js","components/Dashboard/index.js","components/Dashboard/DashboardContainer.js","components/misc/AuthRoute/index.js","components/misc/AuthRoute/AuthRoute.js","App.js","serviceWorker.js","components/misc/GlobalStyle/GlobalStyle.js","components/misc/GlobalStyle/index.js","index.js","assets/images/loginformbackground.jpg","assets/fonts/BRFirmaCW-Bold.woff2","assets/fonts/BRFirmaCW-SemiBold.woff2","assets/fonts/BRFirmaCW-Regular.woff2","assets/fonts/BRFirmaCW-Medium.woff2"],"names":["StyledButton","styled","button","Button","label","props","BASE_URL","InputWrapper","div","StyledInput","input","InputLabel","ErrorMessage","TextInput","register","name","error","type","ref","message","schema","yup","shape","email","required","password","AUTH_TOKEN","window","localStorage","getItem","request","axios","create","baseURL","headers","Authorization","fetchData","path","a","get","res","data","sendData","body","post","modifyResource","put","fetchCompanies","addCompany","updateCompany","_id","getAuthToken","LoginFormWrapper","form","Loginform","useState","setError","navigateTo","useNavigate","useForm","resolver","yupResolver","LoginFormSchema","handleSubmit","errors","onSubmit","then","token","result","setItem","catch","e","Form","placeholder","LoginPageWrapper","LoginLogoContainer","loginformbackground","LoginInputContainer","Loginpage","LoggedOutRoute","LoginPage","LoggedOutRouteContainer","useEffect","useAsyncFn","asyncFn","loading","state","setState","executeFn","companies","atom","key","default","BigHeader","h2","DashboardTableWrapper","TextDiv","TableWrapper","DashboardTable","useRecoilValue","recoilCompanies","map","company","i","subdomain","CenterContent","Centered","children","Modal","open","title","handleClose","show","onHide","animation","size","Header","closeButton","Title","Body","manager","CompanyForm","submitForm","CompanySchema","isSubmitting","formState","disabled","CompanyFormContainer","closeModal","useRecoilState","setCompanies","CreateCompanyButton","setOpen","onClick","StyledWrapper","DashboardEmpty","DashboardHeader","TextButtonWrapper","Dashboard","R","LoadingWrapper","Loading","DashboardContainer","getCompanies","console","log","AuthRoute","NotfoundPage","App","Boolean","location","hostname","match","GlobalStyle","createGlobalStyle","FontBold","FontSemiBold","FontRegular","FontMedium","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"y4BAGA,IAAMA,EAAeC,IAAOC,OAAV,KCDHC,EDwBA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,yBACtC,OACE,kBAACL,EAAiBK,EACfD,I,ogBE1BP,ICDIE,EDCEC,EAAeN,IAAOO,IAAV,KAGZC,EAAcR,IAAOS,MAAV,KAUXC,EAAaV,IAAOG,MAAV,KAIVQ,EAAeX,IAAOO,IAAV,KElBH,GACbK,UFsBgB,SAAC,GAA+D,IAA7DT,EAA4D,EAA5DA,MAAOU,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAqC,IAA9BC,YAA8B,MAAvB,OAAuB,EAAZZ,EAAY,0DAC/E,OACE,kBAACE,EAAD,KACGH,GAAS,kBAACO,EAAD,KAAaP,GACvB,kBAACK,EAAD,eACEQ,KAAMA,EACNC,IAAKJ,EACLC,KAAMA,GACFV,IAELW,GAAS,kBAACJ,EAAD,KAAeI,EAAMG,Y,QG5BtBC,EALAC,MAAaC,MAAM,CAChCC,MAAOF,MAAaE,QAAQC,WAC5BC,SAAUJ,MAAaG,a,wCFEkBlB,EAAW,yBAEtD,IAKMoB,EAFqBC,OAAOC,aAAaC,QAHxB,WAOjBC,EAAUC,IAAMC,OAAO,CAC3BC,QAAS3B,EACT4B,QAAS,CAAEC,cAAc,WAAD,OAAaT,MAG1BU,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACLR,EAAQS,IAAIF,GADP,cACjBG,EADiB,yBAEhBA,EAAIC,MAFY,2CAAH,sDAKhBC,EAAQ,uCAAG,WAAOL,GAAP,6BAAAC,EAAA,6DAAaK,EAAb,+BAAoB,GAApB,SACGb,EAAQc,KAAKP,EAAMM,GADtB,cACTH,EADS,yBAERA,EAAIC,MAFI,2CAAH,sDAUDI,EAAc,uCAAG,WAAOR,EAAMM,GAAb,eAAAL,EAAA,sEACVR,EAAQgB,IAAIT,EAAMM,GADR,cACtBH,EADsB,yBAErBA,EAAIC,KAAKA,MAFY,2CAAH,wDAMdM,EAAiB,kBAAMX,EAAU,iBACjCY,EAAa,SAACL,GAAD,OAAUD,EAAS,kBAAmBC,IACnDM,EAAgB,SAACN,GAAD,OAAUE,EAAe,YAAD,OAAaF,EAAKO,KAAOP,IGxCxEQ,EAAe,kBAAMxB,OAAOC,aAAaC,QAHxB,Y,gaCYvB,IAAMuB,EAAmBnD,IAAOoD,KAAV,KAkEPC,EA/CG,SAAAjD,GAAU,IAAD,EACCkD,mBAAS,MADV,mBAClBvC,EADkB,KACXwC,EADW,KAEnBC,EAAaC,cAFM,EAGkBC,YAAQ,CACjDC,SAAUC,YAAYC,KADhBhD,EAHiB,EAGjBA,SAAUiD,EAHO,EAGPA,aAAcC,EAHP,EAGOA,OAehC,OACE,kBAACZ,EAAD,CAAkBa,SAAUF,GAbb,SAAAtB,GJGO,IAACE,KIFZF,EJEqBC,EAAS,eAAgBC,IIDtDuB,MAAK,SAAC1B,GDrCQ,IAAA2B,ECsCT3B,GAAOA,EAAI4B,QDtCFD,ECuCE3B,EAAI4B,OAAOD,MDvCJxC,OAAOC,aAAayC,QAF3B,UAEmDF,GCwChEV,EAAW,eAEXD,EAAS,iCAGZc,OAAM,SAACC,GAAD,OAAOf,EAAS,oCAIvB,6BACGxC,GAAS,6BAAMA,GAChB,kBAACwD,EAAK3D,UAAN,CACET,MAAM,QACNW,KAAK,QACLE,KAAK,QACLH,SAAUA,EACVE,QAASgD,EAAOzC,MAChBkD,YAAY,gBAEd,kBAACD,EAAK3D,UAAN,CACEC,SAAUA,EACVV,MAAM,WACNW,KAAK,WACLE,KAAK,WACLD,MAAOgD,EAAOvC,SACdgD,YAAY,mBAEd,kBAAC,EAAD,CACErE,MAAM,QACNa,KAAK,c,mfCjEf,IAAMyD,EAAmBzE,IAAOO,IAAV,KAIhBmE,EAAqB1E,IAAOO,IAAV,IAEEoE,KAMpBC,EAAsB5E,IAAOO,IAAV,KChBVsE,GDuBG,SAACzE,GACjB,OACE,kBAACqE,EAAD,KACE,kBAACC,EAAD,aAGA,kBAACE,EAAD,KACE,6BACE,kBAAC,EAAD,UErBKE,GARQ,WACrB,OACE,kBAAC,IAAD,KACE,kBAACC,GAAD,CAAW3C,KAAK,QCLP4C,GCGiB,WAC9B,IAAMxB,EAAaC,cAQnB,OANAwB,qBAAU,WACM/B,KACDM,EAAW,gBAEvB,IAGD,kBAAC,GAAD,O,SCSW0B,GAtBI,SAACC,GAAa,IAAD,EACJ7B,mBAAS,CACjC8B,SAAS,EACTrE,MAAO,KACPyB,KAAM,OAJsB,mBACvB6C,EADuB,KAChBC,EADgB,KAmB9B,OAAO,gBAAKD,EAAZ,CAAmBE,UAZD,WAChB,OAAOJ,EAAO,WAAP,aACJlB,MAAK,SAAAzB,GAEJ,OADA8C,EAAS,gBAAKD,EAAN,CAAaD,SAAS,EAAO5C,KAAMA,EAAK2B,UACzC3B,KAER6B,OAAM,SAAAtD,GAEL,OADAuE,EAAS,gBAAKD,EAAN,CAAaD,SAAS,EAAOrE,WAC9BA,S,SCTFyE,GAAYC,gBAAK,CAC5BC,IAAK,YACLC,QARmB,CACnBP,SAAS,EACTrE,OAAO,EACPyB,KAAM,Q,6mCCAR,IAAMoD,GAAY5F,IAAO6F,GAAV,MASTC,GAAwB9F,IAAOO,IAAV,MAYrBwF,GAAU/F,IAAOO,IAAV,MASPyF,GAAehG,IAAOO,IAAV,MAkEH0F,GArCQ,WAAO,IAAD,EACUC,0BAAeC,IAAtCX,EADa,EACnBhD,KACR,OAF2B,EACF4C,QACL,UAElB,oCACE,kBAACQ,GAAD,kBACA,kBAACE,GAAD,KACE,kBAACC,GAAD,KACE,6BACE,0DAGJ,kBAACC,GAAD,KACE,+BACE,+BACE,4BACE,mCACA,uCACA,2CAGJ,+BACGR,EAAUY,KAAI,SAACC,EAASC,GAAV,OACb,wBAAIZ,IAAKY,GACP,8BAAOA,GACP,4BAAKD,EAAQvF,MACb,4BAAKuF,EAAQE,qB,gLCvF/B,IAAMC,GAAgBxG,IAAOO,IAAV,MCDJkG,GDSE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,kBAACF,GAAD,KACE,6BACGE,K,UEbMC,GCCK,SAAC,GAAmD,IAAD,IAAhDC,YAAgD,SAAnCC,EAAmC,EAAnCA,MAAOH,EAA4B,EAA5BA,SAAUI,EAAkB,EAAlBA,YACnD,OACE,kBAACH,GAAA,EAAD,CAAOI,KAAMH,EAAMI,OAAQF,EAAaG,WAAW,EAAOC,KAAK,MAC7D,kBAACP,GAAA,EAAMQ,OAAP,CAAcC,aAAW,GACvB,kBAACT,GAAA,EAAMU,MAAP,KAAcR,EAAd,MAEF,kBAACF,GAAA,EAAMW,KAAP,KAAaZ,K,QCYJvF,GAnBAC,MAAaC,MAAM,CAChCgF,QAASjF,MACNjB,MAAM,gBACNoB,SAAS,4BAEZgF,UAAWnF,MACRG,SAAS,yBAEZgG,QAASnG,MACNG,SAAS,6BAEZD,MAAOF,MACJE,MAAM,0BACNC,SAAS,qBAEZC,SAAUJ,MACPG,SAAS,0BCyCCiG,GApDK,SAAC,GAAmD,IAAjDzG,EAAgD,EAAhDA,MAA+B0G,GAAiB,EAAzCrC,QAAyC,EAAhC5C,KAAgC,EAA1B6D,QAA0B,EAAjBoB,YAAiB,EACf/D,YAAQ,CAC5DC,SAAUC,YAAY8D,MADhB7G,EAD6D,EAC7DA,SAAUiD,EADmD,EACnDA,aAAcC,EADqC,EACrCA,OAGxB4D,EAJ6D,EAC7BC,UAGhCD,aACR,OACE,0BAAM3D,SAAUF,EAAa2D,IAC1B1G,GAAS,6BAAMA,GAChB,kBAACwD,EAAK3D,UAAN,CACEE,KAAK,UACL0D,YAAY,UACZrE,MAAM,eACNU,SAAUA,EACVE,MAAOgD,EAAOsC,UAEhB,kBAAC9B,EAAK3D,UAAN,CACEE,KAAK,YACL0D,YAAY,YACZrE,MAAM,oBACNU,SAAUA,EACVE,MAAOgD,EAAOwC,YAEhB,kBAAChC,EAAK3D,UAAN,CACEE,KAAK,UACL0D,YAAY,gBACZrE,MAAM,gBACNU,SAAUA,EACVE,MAAOgD,EAAOwD,UAEhB,kBAAChD,EAAK3D,UAAN,CACEE,KAAK,QACL0D,YAAY,QACZrE,MAAM,iBACNU,SAAUA,EACVE,MAAOgD,EAAOzC,QAEhB,kBAACiD,EAAK3D,UAAN,CACEE,KAAK,WACL0D,YAAY,WACZrE,MAAM,oBACNU,SAAUA,EACVE,MAAOgD,EAAOvC,WAEhB,kBAAC,EAAD,CACErB,MAAM,cACN0H,SAAUF,EACV3G,KAAK,aCnDE8G,GCKc,SAAC,GAA6B,IAA3BzB,EAA0B,EAA1BA,QAAS0B,EAAiB,EAAjBA,WAAiB,EAEA7C,GADtCmB,EAAUrD,EAAgBD,GACpChC,EAFgD,EAEhDA,MAAOqE,EAFyC,EAEzCA,QAAS5C,EAFgC,EAEhCA,KAAiBiF,EAFe,EAE1BlC,UAF0B,EAGtByC,0BAAe7B,IAHO,mBAGjDX,EAHiD,KAGtCyC,EAHsC,KAaxD,OARAhD,qBAAU,WACJzC,IACFyF,EAAa,gBAAKzC,EAAN,CAAiBJ,SAAS,EAAO5C,KAAK,GAAD,oBAAMgD,EAAUhD,MAAhB,CAAsBA,EAAK6D,aAC5E0B,OAGD,CAACvF,IAGF,kBAAC,GAAD,CACE6D,QAASA,EACTtF,MAAOA,EACPqE,QAASA,EACT5C,KAAMA,EACNiF,WAAYA,KCxBHS,GCGa,WAAO,IAAD,EACR5E,oBAAS,GADD,mBACzBsD,EADyB,KACnBuB,EADmB,KAG1BrB,EAAc,kBAAMqB,GAAQ,IAClC,OACE,oCACE,kBAAC,EAAD,CACEhI,MAAM,cACNiI,QANa,kBAAMD,GAAQ,MAQ7B,kBAAC,GAAD,CACEvB,KAAMA,EACNC,MAAM,qBACNC,YAAaA,GAEb,kBAAC,GAAD,CAAaiB,WAAYjB,O,iLCdjC,IAAMuB,GAAgBrI,IAAOO,IAAV,MAuBJ+H,GAbQ,WACrB,OACE,6BACE,kBAAC,GAAD,KACE,kBAACD,GAAD,KACE,qFACA,kBAAC,GAAD,U,gXCdV,IAAME,GAAkBvI,IAAO6F,GAAV,MAQf2C,GAAoBxI,IAAOO,IAAV,MAuBRkI,GAbG,SAAC,GAAmB,IAAjBjD,EAAgB,EAAhBA,UACnB,OACE,oCACE,kBAACgD,GAAD,KACE,kBAACD,GAAD,kBACA,kBAAC,GAAD,OAGDG,KAAUlD,GAAa,kBAAC,GAAD,MAAqB,kBAAC,GAAD,CAAgBA,UAAWA,M,gLC/B9E,IAAMmD,GAAiB3I,IAAOO,IAAV,MCDLqI,GDSC,WACd,OACE,kBAACD,GAAD,oBEXWE,GCMY,WAAO,IAAD,EACGb,0BAAe7B,IADlB,mBACxBX,EADwB,KACbyC,EADa,OAO3B/C,GAAWpC,GAJbsC,EAH6B,EAG7BA,QACArE,EAJ6B,EAI7BA,MACAyB,EAL6B,EAK7BA,KACWsG,EANkB,EAM7BvD,UAgBF,OAbAwD,QAAQC,IAAI,CAAExD,cAEdP,qBAAU,WACRgD,EAAa,gBAAKzC,EAAN,CAAiBJ,SAAS,KACtC0D,MAEC,IAEH7D,qBAAU,YACHG,GAAW5C,GAAMyF,EAAa,gBAAKzC,EAAN,CAAiBJ,SAAS,EAAO5C,YAElE,CAAC4C,EAAS5C,IAET4C,EAAgB,kBAAC,GAAD,MAChBrE,EAAc,0DAEhB,kBAAC,GAAD,CAAWyE,UAAWhD,KC/BXyG,GCGG,WAChB,IAAMzF,EAAaC,cAQnB,OAPAwB,qBAAU,WACM/B,KACAM,EAAW,OAGxB,IAGD,oCACE,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAWpB,KAAK,SCXlB8G,GAAe,kBAAM,gDAYZC,GAVH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAgB/G,KAAK,MACrB,kBAAC,GAAD,CAAWA,KAAK,eAChB,kBAAC,GAAD,CAAcuD,SAAO,MCDPyD,QACW,cAA7B1H,OAAO2H,SAASC,UAEe,UAA7B5H,OAAO2H,SAASC,UAEhB5H,OAAO2H,SAASC,SAASC,MACvB,2D,ugBCZN,ICJeC,GDIKC,YAAH,KAGFC,KAIAC,KAIAC,KAIAC,MEbfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,cAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,QAGJC,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdlG,OAAM,SAAAtD,GACLgI,QAAQhI,MAAMA,EAAMG,a,mBIzI5BsJ,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,gD","file":"static/js/main.46032bf5.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledButton = styled.button`\r\n  outline: 0;\r\n  background-color: #0066f5;\r\n  border: none;\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  height: 40px;\r\n  font-size: 15px;\r\n  color: #fff;\r\n  position: relative;\r\n  text-decoration: none;\r\n  padding: 0 1.8em 2.5px;\r\n  transition-duration: .3s;\r\n  text-transform: capitalize;\r\n  transition-property: background-color, opacity, color, transform, box-shadow;\r\n  transition-timing-function: ease-in-out;\r\n  user-select: none;\r\n  transform-style: preserve-3d;\r\n  will-change: background-color, opacity, color, transform, box-shadow;\r\n  box-shadow: 0 2px 4px 0 rgba(10, 46, 101, .08);\r\n`\r\n\r\nconst Button = ({ label, ...props }) => {\r\n  return (\r\n    <StyledButton {...props}>\r\n      {label}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import Button from './Button'\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst InputWrapper = styled.div`\r\n  margin-bottom: 10px;\r\n`\r\nconst StyledInput = styled.input`\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  display: block;\r\n  background: #edf2f7;\r\n  border-radius: 0.25rem;\r\n  width: 100%;\r\n`\r\n\r\nconst InputLabel = styled.label`\r\n  font-size: 12px;\r\n  margin: 0;\r\n`\r\nconst ErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n`\r\n\r\nconst TextInput = ({ label, register, name, error, type = 'text', ...props }) => {\r\n  return (\r\n    <InputWrapper>\r\n      {label && <InputLabel>{label}</InputLabel>}\r\n      <StyledInput\r\n        type={type}\r\n        ref={register}\r\n        name={name}\r\n        {...props}\r\n      />\r\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default TextInput\r\n","import axios from 'axios'\r\n\r\nlet BASE_URL\r\n\r\nif (process.env.NODE_ENV === 'development') BASE_URL = 'http://localhost:3001'\r\nif (process.env.NODE_ENV === 'test') BASE_URL = 'http://.api.isuites.xyz'\r\nif (process.env.NODE_ENV === 'production') BASE_URL = 'http://api.isuites.xyz'\r\n\r\nconst AUTH_TOKEN_KEY = '__token'\r\n\r\nexport const saveAuthToken = token => window.localStorage.setItem(AUTH_TOKEN_KEY, token)\r\nconst getAuthToken = () => window.localStorage.getItem(AUTH_TOKEN_KEY)\r\n\r\nconst AUTH_TOKEN = getAuthToken(AUTH_TOKEN_KEY)\r\n\r\nconst request = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: { Authorization: `Bearer: ${AUTH_TOKEN}` }\r\n})\r\n\r\nexport const fetchData = async (path) => {\r\n  const res = await request.get(path)\r\n  return res.data\r\n}\r\n\r\nconst sendData = async (path, body = {}) => {\r\n  const res = await request.post(path, body)\r\n  return res.data\r\n}\r\n\r\nexport const deleteResource = async (path, body) => {\r\n  const res = await request.delete(path, body)\r\n  return res.data.data\r\n}\r\n\r\nexport const modifyResource = async (path, body) => {\r\n  const res = await request.put(path, body)\r\n  return res.data.data\r\n}\r\n\r\nexport const adminLogin = (body) => sendData('/admin/login', body)\r\nexport const fetchCompanies = () => fetchData('/company/all')\r\nexport const addCompany = (body) => sendData('/company/create', body)\r\nexport const updateCompany = (body) => modifyResource(`/company/${body._id}`, body)\r\n","import TextInput from './TextInput'\r\n\r\nexport default {\r\n  TextInput\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst schema = yup.object().shape({\r\n  email: yup.string().email().required(),\r\n  password: yup.string().required()\r\n})\r\n\r\nexport default schema\r\n","const AUTH_TOKEN_KEY = '__token'\r\n\r\nconst setAuthToken = token => window.localStorage.setItem(AUTH_TOKEN_KEY, token)\r\nconst getAuthToken = () => window.localStorage.getItem(AUTH_TOKEN_KEY)\r\nconst removeToken = () => window.localStorage.removeItem(AUTH_TOKEN_KEY)\r\n\r\nexport {\r\n  getAuthToken,\r\n  setAuthToken,\r\n  removeToken\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers'\r\nimport Button from '../misc/Button'\r\nimport { useNavigate } from '@reach/router'\r\n\r\nimport Form from '../Form'\r\nimport LoginFormSchema from './LoginFormSchema'\r\nimport { adminLogin } from '../../helpers/api'\r\nimport { setAuthToken } from '../../helpers/auth'\r\n\r\nconst LoginFormWrapper = styled.form`\r\n  border: 1px solid rgba(0, 102, 245, .15);\r\n  background-color: #fff;\r\n  width: 350px;\r\n  padding: 20px 20px;\r\n  min-height: 200px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-shadow: 1px 15px 18px rgba(0 ,0 , 0, .03);\r\n  border-radius: 6px;\r\n\r\n  p {\r\n    font-size: 15px;\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Loginform = props => {\r\n  const [error, setError] = useState(null)\r\n  const navigateTo = useNavigate()\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(LoginFormSchema)\r\n  })\r\n  const onSubmit = data => {\r\n    adminLogin(data)\r\n      .then((res) => {\r\n        if (res && res.result) {\r\n          setAuthToken(res.result.token)\r\n          navigateTo('/dashboard')\r\n        } else {\r\n          setError('Invalid login credentials.')\r\n        }\r\n      })\r\n      .catch((e) => setError('Error Occured, try again.'))\r\n  }\r\n  return (\r\n    <LoginFormWrapper onSubmit={handleSubmit(onSubmit)}>\r\n      <div>\r\n        {error && <div>{error}</div>}\r\n        <Form.TextInput\r\n          label='Email'\r\n          name='email'\r\n          type='email'\r\n          register={register}\r\n          error={!!errors.email}\r\n          placeholder='Enter email'\r\n        />\r\n        <Form.TextInput\r\n          register={register}\r\n          label='Password'\r\n          name='password'\r\n          type='password'\r\n          error={errors.password}\r\n          placeholder='Enter password'\r\n        />\r\n        <Button\r\n          label='Login'\r\n          type='submit'\r\n        />\r\n      </div>\r\n    </LoginFormWrapper>\r\n  )\r\n}\r\n\r\nexport default Loginform\r\n","import React from 'react'\r\nimport Loginform from './Loginform'\r\nimport styled from 'styled-components'\r\n\r\nimport loginformbackground from '../../assets/images/loginformbackground.jpg'\r\n\r\nconst LoginPageWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst LoginLogoContainer = styled.div`\r\n  flex-basis: 70%;\r\n  background-image: url(${loginformbackground});\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  height: 100vh;\r\n`\r\nconst LoginInputContainer = styled.div`\r\n  flex-basis: 30%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Loginpage = (props) => {\r\n  return (\r\n    <LoginPageWrapper>\r\n      <LoginLogoContainer>\r\n        &nbsp;\r\n      </LoginLogoContainer>\r\n      <LoginInputContainer>\r\n        <div>\r\n          <Loginform />\r\n        </div>\r\n      </LoginInputContainer>\r\n    </LoginPageWrapper>\r\n  )\r\n}\r\n\r\nexport default Loginpage\r\n","import Loginpage from './loginpage'\r\n\r\nexport default Loginpage\r\n","import React from 'react'\r\nimport { Router } from '@reach/router'\r\nimport LoginPage from '../../LoginPage'\r\n\r\nconst LoggedOutRoute = () => {\r\n  return (\r\n    <Router>\r\n      <LoginPage path='/' />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default LoggedOutRoute\r\n","import LoggedOutRouteContainer from './LoggedOutRouteContainer'\r\n\r\nexport default LoggedOutRouteContainer\r\n","import LoggedOutRoute from './LoggedOutRoute'\r\nimport React, { useEffect } from 'react'\r\nimport { useNavigate } from '@reach/router'\r\nimport { getAuthToken } from '../../../helpers/auth'\r\n\r\nconst LoggedOutRouteContainer = () => {\r\n  const navigateTo = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const token = getAuthToken()\r\n    if (token) { navigateTo('/dashboard') }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <LoggedOutRoute />\r\n  )\r\n}\r\n\r\nexport default LoggedOutRouteContainer\r\n","import { useState } from 'react'\r\n\r\nconst useAsyncFn = (asyncFn) => {\r\n  const [state, setState] = useState({\r\n    loading: true,\r\n    error: null,\r\n    data: null\r\n  })\r\n\r\n  const executeFn = (...args) => {\r\n    return asyncFn(...args)\r\n      .then(data => {\r\n        setState({ ...state, loading: false, data: data.result })\r\n        return data\r\n      })\r\n      .catch(error => {\r\n        setState({ ...state, loading: false, error })\r\n        return error\r\n      })\r\n  }\r\n\r\n  return { ...state, executeFn }\r\n}\r\n\r\nexport default useAsyncFn\r\n","import { atom } from 'recoil'\r\n\r\nconst defaultState = {\r\n  loading: false,\r\n  error: false,\r\n  data: null\r\n}\r\n\r\nexport const companies = atom({\r\n  key: 'companies',\r\n  default: defaultState\r\n})\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRecoilValue } from 'recoil'\r\nimport { companies as recoilCompanies } from '../../Recoil/atoms'\r\n\r\nconst BigHeader = styled.h2`\r\n  font-size: 120px;\r\n  margin-left: 250px;\r\n  color: rgba(15, 21, 64, .2);\r\n  font-weight: bold;\r\n  margin-top: 50px;\r\n  user-select: none;\r\n`\r\n\r\nconst DashboardTableWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n\r\n  h2 {\r\n    font-size: 120px;\r\n  }\r\n\r\n`\r\n\r\nconst TextDiv = styled.div`\r\n  flex-basis: 50%;\r\n\r\n  div {\r\n    margin-top: 10px;\r\n    margin-left: 200px;\r\n  }\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  flex-basis: 45%;\r\n  margin-top: 50px;\r\n  border: 1px solid rgba(0, 102, 245, .15);\r\n  background-color: #fff;\r\n  padding: 40px 40px 30px;\r\n  min-height: 200px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-shadow: 1px 15px 18px rgba(0 ,0 , 0, .03);\r\n  border-radius: 6px;\r\n\r\n  table {\r\n    font-size: 14px;\r\n    width: 100%;\r\n    text-align: center;\r\n\r\n    thead {\r\n      height: 70px;\r\n      background: whitesmoke;\r\n    }\r\n\r\n    tr {\r\n      height: 30px;\r\n    }\r\n\r\n  }\r\n`\r\n\r\nconst DashboardTable = () => {\r\n  const { data: companies, loading } = useRecoilValue(recoilCompanies)\r\n  if (loading) return 'Loading'\r\n  return (\r\n    <>\r\n      <BigHeader>Companies</BigHeader>\r\n      <DashboardTableWrapper>\r\n        <TextDiv>\r\n          <div>\r\n            <p>List of companies on HMS.</p>\r\n          </div>\r\n        </TextDiv>\r\n        <TableWrapper>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>S/N</th>\r\n                <th>Company</th>\r\n                <th>Subdomain</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {companies.map((company, i) => (\r\n                <tr key={i}>\r\n                  <td>{++i}</td>\r\n                  <td>{company.name}</td>\r\n                  <td>{company.subdomain}</td>\r\n                </tr>))}\r\n\r\n            </tbody>\r\n          </table>\r\n        </TableWrapper>\r\n      </DashboardTableWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashboardTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CenterContent = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nconst Centered = ({ children }) => {\r\n  return (\r\n    <CenterContent>\r\n      <div>\r\n        {children}\r\n      </div>\r\n    </CenterContent>\r\n  )\r\n}\r\n\r\nexport default Centered\r\n","import Centered from './Center'\r\n\r\nexport default Centered\r\n","import Modal from './Modal'\r\n\r\nexport default Modal\r\n","import React from 'react'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\nconst CustomModal = ({ open = true, title, children, handleClose }) => {\r\n  return (\r\n    <Modal show={open} onHide={handleClose} animation={false} size='md'>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CustomModal\r\n","import * as yup from 'yup'\r\n\r\nconst schema = yup.object().shape({\r\n  company: yup.string()\r\n    .label('Company name')\r\n    .required('Company name is required'),\r\n\r\n  subdomain: yup.string()\r\n    .required('Subdomain is required'),\r\n\r\n  manager: yup.string()\r\n    .required('Managers name is required'),\r\n\r\n  email: yup.string()\r\n    .email('Invalid Emaail address')\r\n    .required('Email is required'),\r\n\r\n  password: yup.string()\r\n    .required('Password is required')\r\n})\r\n\r\nexport default schema\r\n","import React from 'react'\r\nimport Form from '../Form'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers'\r\nimport CompanySchema from './CompanyFormSchema'\r\nimport Button from '../misc/Button'\r\n\r\nconst CompanyForm = ({ error, loading, data, company, submitForm }) => {\r\n  const { register, handleSubmit, errors, formState } = useForm({\r\n    resolver: yupResolver(CompanySchema)\r\n  })\r\n  const { isSubmitting } = formState\r\n  return (\r\n    <form onSubmit={handleSubmit(submitForm)}>\r\n      {error && <div>{error}</div>}\r\n      <Form.TextInput\r\n        name='company'\r\n        placeholder='Company'\r\n        label='Company Name'\r\n        register={register}\r\n        error={errors.company}\r\n      />\r\n      <Form.TextInput\r\n        name='subdomain'\r\n        placeholder='Subdomain'\r\n        label='Company Subdomain'\r\n        register={register}\r\n        error={errors.subdomain}\r\n      />\r\n      <Form.TextInput\r\n        name='manager'\r\n        placeholder='Managers name'\r\n        label='Managers name'\r\n        register={register}\r\n        error={errors.manager}\r\n      />\r\n      <Form.TextInput\r\n        name='email'\r\n        placeholder='Email'\r\n        label='Managers Email'\r\n        register={register}\r\n        error={errors.email}\r\n      />\r\n      <Form.TextInput\r\n        name='password'\r\n        placeholder='Password'\r\n        label='Managers Password'\r\n        register={register}\r\n        error={errors.password}\r\n      />\r\n      <Button\r\n        label='Add company'\r\n        disabled={isSubmitting}\r\n        type='submit'\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CompanyForm\r\n","import CompanyFormContainer from './CompanyFormContainer'\r\n\r\nexport default CompanyFormContainer\r\n","import React, { useEffect } from 'react'\r\nimport CompanyForm from './CompanyForm'\r\nimport { addCompany, updateCompany } from '../../helpers/api'\r\nimport useAsyncFn from '../../hooks/useAsyncFn'\r\nimport { useRecoilState } from 'recoil'\r\nimport { companies as recoilCompanies } from '../../Recoil/atoms'\r\n\r\nconst CompanyFormContainer = ({ company, closeModal }) => {\r\n  const apiMethod = company ? updateCompany : addCompany\r\n  const { error, loading, data, executeFn: submitForm } = useAsyncFn(apiMethod)\r\n  const [companies, setCompanies] = useRecoilState(recoilCompanies)\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setCompanies({ ...companies, loading: false, data: [...companies.data, data.company] })\r\n      closeModal()\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [data])\r\n\r\n  return (\r\n    <CompanyForm\r\n      company={company}\r\n      error={error}\r\n      loading={loading}\r\n      data={data}\r\n      submitForm={submitForm}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CompanyFormContainer\r\n","import CreateCompanyButton from './CreateCompanyButton'\r\n\r\nexport default CreateCompanyButton\r\n","import React, { useState } from 'react'\r\nimport Modal from '../Modal'\r\nimport CompanyForm from '../../CompanyForm'\r\nimport Button from '../Button'\r\n\r\nconst CreateCompanyButton = () => {\r\n  const [open, setOpen] = useState(false)\r\n  const handleOpen = () => setOpen(true)\r\n  const handleClose = () => setOpen(false)\r\n  return (\r\n    <>\r\n      <Button\r\n        label='Add company'\r\n        onClick={handleOpen}\r\n      />\r\n      <Modal\r\n        open={open}\r\n        title='Create new company'\r\n        handleClose={handleClose}\r\n      >\r\n        <CompanyForm closeModal={handleClose} />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateCompanyButton\r\n","import React from 'react'\r\nimport Centered from '../misc/Centered'\r\nimport styled from 'styled-components'\r\n\r\nimport CreateCompanyButton from '../misc/CreateCompanyButton'\r\n\r\nconst StyledWrapper = styled.div`\r\n  text-align: center;\r\n  width: 500px;\r\n  margin-top: 200px;\r\n\r\n  div {\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nconst DashboardEmpty = () => {\r\n  return (\r\n    <div>\r\n      <Centered>\r\n        <StyledWrapper>\r\n          <div>No company created yet. Click to create new company.</div>\r\n          <CreateCompanyButton />\r\n        </StyledWrapper>\r\n      </Centered>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashboardEmpty\r\n","import React from 'react'\r\nimport * as R from 'ramda'\r\nimport styled from 'styled-components'\r\n\r\nimport DashboardTable from './DashboardTable'\r\nimport DashboardEmpty from './DashboardEmpty'\r\nimport CreateCompanyButton from '../misc/CreateCompanyButton'\r\n\r\nconst DashboardHeader = styled.h2`\r\n  padding: 10px 5px;\r\n  font-size: 30px;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  width: fit-content;\r\n`\r\n\r\nconst TextButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 0 40px;\r\n\r\n  button {\r\n    margin-top: 25px;\r\n  }\r\n`\r\n\r\nconst Dashboard = ({ companies }) => {\r\n  return (\r\n    <>\r\n      <TextButtonWrapper>\r\n        <DashboardHeader>Dashboard</DashboardHeader>\r\n        <CreateCompanyButton />\r\n      </TextButtonWrapper>\r\n\r\n      {R.isEmpty(companies) ? <DashboardEmpty /> : <DashboardTable companies={companies} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst LoadingWrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <LoadingWrapper>\r\n      Loading...\r\n    </LoadingWrapper>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","import Loading from './loading'\r\n\r\nexport default Loading\r\n","import DashboardContainer from './DashboardContainer'\r\n\r\nexport default DashboardContainer\r\n","import React, { useEffect } from 'react'\r\nimport useAsyncFn from '../../hooks/useAsyncFn'\r\nimport { useRecoilState } from 'recoil'\r\nimport { companies as recoilCompanies } from '../../Recoil/atoms'\r\nimport { fetchCompanies } from '../../helpers/api'\r\nimport Dashboard from './Dashboard'\r\nimport Loading from '../misc/Loading'\r\n\r\nconst DashboardContainer = () => {\r\n  const [companies, setCompanies] = useRecoilState(recoilCompanies)\r\n  const {\r\n    loading,\r\n    error,\r\n    data,\r\n    executeFn: getCompanies\r\n  } = useAsyncFn(fetchCompanies)\r\n\r\n  console.log({ companies })\r\n\r\n  useEffect(() => {\r\n    setCompanies({ ...companies, loading: true })\r\n    getCompanies()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!loading && data) setCompanies({ ...companies, loading: false, data })\r\n    // eslint-disable-next-line\r\n  }, [loading, data])\r\n\r\n  if (loading) return <Loading />\r\n  if (error) return <div>Could not fetch this data</div>\r\n  return (\r\n    <Dashboard companies={data} />\r\n  )\r\n}\r\n\r\nexport default DashboardContainer\r\n","import AuthRoute from './AuthRoute'\r\n\r\nexport default AuthRoute\r\n","import React, { useEffect } from 'react'\r\nimport { getAuthToken } from '../../../helpers/auth'\r\nimport { useNavigate, Router } from '@reach/router'\r\nimport Dashboard from '../../Dashboard'\r\n\r\nconst AuthRoute = () => {\r\n  const navigateTo = useNavigate()\r\n  useEffect(() => {\r\n    const token = getAuthToken()\r\n    if (!token) { navigateTo('/') }\r\n\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Dashboard path='/' />\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n","import React from 'react'\r\nimport { Router } from '@reach/router'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport LoggedOutRoute from './components/misc/LoggedOutRoute'\r\nimport AuthRoute from './components/misc/AuthRoute'\r\n\r\nconst NotfoundPage = () => <div>Page not found</div>\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <LoggedOutRoute path='/' />\r\n      <AuthRoute path='/dashboard' />\r\n      <NotfoundPage default />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\nimport FontBold from '../../../assets/fonts/BRFirmaCW-Bold.woff2'\r\nimport FontSemiBold from '../../../assets/fonts/BRFirmaCW-SemiBold.woff2'\r\nimport FontRegular from '../../../assets/fonts/BRFirmaCW-Regular.woff2'\r\nimport FontMedium from '../../../assets/fonts/BRFirmaCW-Medium.woff2'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @font-face {\r\n    font-family: font-bold;\r\n    src: url(${FontBold});\r\n  }\r\n  @font-face {\r\n    font-family: font-semibold;\r\n    src: url(${FontSemiBold});\r\n  }\r\n  @font-face {\r\n    font-family: font-regular;\r\n    src: url(${FontRegular});\r\n  }\r\n  @font-face {\r\n    font-family: font-medium;\r\n    src: url(${FontMedium});\r\n  }\r\n  body {\r\n    background: #f4f7fa;\r\n    font-family: font-regular;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","import GlobalStyle from './GlobalStyle'\r\n\r\nexport default GlobalStyle\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { RecoilRoot } from 'recoil'\r\nimport GlobalStyle from './components/misc/GlobalStyle'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <GlobalStyle />\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/loginformbackground.4556371f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BRFirmaCW-Bold.c57ee9ed.woff2\";","module.exports = __webpack_public_path__ + \"static/media/BRFirmaCW-SemiBold.9b995a2d.woff2\";","module.exports = __webpack_public_path__ + \"static/media/BRFirmaCW-Regular.94934930.woff2\";","module.exports = __webpack_public_path__ + \"static/media/BRFirmaCW-Medium.638ff989.woff2\";"],"sourceRoot":""}